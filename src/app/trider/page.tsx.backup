"use client";

import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { TriderChatSheet } from '@/components/triders/TriderChatSheet';
import { TriderDetailPanel } from '@/components/triders/TriderDetailPanel';
import { TriderWalletInfo } from '@/components/triders/TriderWalletInfo';
import { RideRequestList } from '@/components/dispatch/RideRequestList';
import { Trider, RideRequest, TodaZone, TriderWallet, TriderProfile, ChatMessage, TriderExtendedStatus } from '@/types';

// Define a simple type for activeRide
interface ActiveRide {
  passengerName: string;
  destination: string;
  // Add other properties as needed
}

// Dynamically import MapboxMap to prevent SSR issues
const MapboxMap = dynamic(() => import('@/components/map/MapboxMap').then(mod => mod.MapboxMap), {
  ssr: false,
});

const TriderPage = () => {
  const [currentLocation, setCurrentLocation] = useState({ lat: 34.052235, lng: -118.243683 }); // Default to Los Angeles
  const [isOnline, setIsOnline] = useState(false);
  const [activeRide, setActiveRide] = useState<ActiveRide | null>(null); // Use the defined type

  // Dummy data for MapboxMap props
  const [triders, setTriders] = useState<Trider[]>([]);
  const [rideRequests, setRideRequests] = useState<RideRequest[]>([]);
  const [selectedTrider, setSelectedTrider] = useState<Trider | null>(null);
  const [selectedRideRequest, setSelectedRideRequest] = useState<RideRequest | null>(null);
  const [routeGeoJson, setRouteGeoJson] = useState<GeoJSON.FeatureCollection | null>(null);
  const [heatmapData, setHeatmapData] = useState<GeoJSON.FeatureCollection | null>(null);
  const [todaZones, setTodaZones] = useState<TodaZone[]>([]);
  const [showHeatmap, setShowHeatmap] = useState(false);

  // State for TriderWalletInfo
  const [triderWallet, setTriderWallet] = useState<TriderWallet>({
    id: 'trider-wallet-1',
    triderId: 'trider-1',
    currentBalance: 1500.75,
    totalEarnedAllTime: 12500.50,
    todayTotalRides: 5,
    todayTotalFareCollected: 300.00,
    todayTotalCommission: 60.00,
    todayNetEarnings: 240.00,
    paymentLogs: [
      { id: 'payout-1', date: new Date(), amount: 500, status: 'completed', method: 'GCash' },
      { id: 'payout-2', date: new Date(Date.now() - 86400000), amount: 200, status: 'pending', method: 'GCash' },
    ],
    recentRides: [
      { id: 'ride-1', date: new Date(), pickupAddress: '123 Main St', dropoffAddress: '456 Oak Ave', fare: 100, commissionDeducted: 20, netEarnings: 80 },
      { id: 'ride-2', date: new Date(Date.now() - 3600000), pickupAddress: '789 Pine St', dropoffAddress: '101 Elm St', fare: 80, commissionDeducted: 16, netEarnings: 64 },
    ],
  } as TriderWallet); // Explicitly cast to TriderWallet

  // State for TriderChatSheet
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [currentTriderProfile, setCurrentTriderProfile] = useState<TriderProfile>({
    id: 'trider-1',
    name: 'Juan Dela Cruz',
    email: 'juan@example.com',
    phone: '09171234567',
    profilePictureUrl: 'https://api.dicebear.com/7.x/adventurer/svg?seed=Juan',
    status: 'available',
    vehicleType: 'Motorcycle',
    bodyNumber: 'TR-001',
    todaZoneName: 'Zone A',
    location: { latitude: 34.052235, longitude: -118.243683 },
    wallet: triderWallet, // Use the dummy wallet
    dataAiHint: 'person face',
    requestedTodaZoneId: undefined,
    todaZoneChangeRequestStatus: undefined,
    todaZoneId: 'toda-zone-1', // Added missing property
    currentPath: null, // Changed to null as per RoutePath | null
    pathIndex: 0, // Added missing property
    isOnline: true, // Added missing property
  } as TriderProfile); // Explicitly cast to TriderProfile
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);

  // State for TriderDetailPanel (using selectedTrider for this)
  const [selectedTriderProfile, setSelectedTriderProfile] = useState<TriderProfile | null>(null);
  const [selectedRideRequestId, setSelectedRideRequestId] = useState<string | null>(null);


  useEffect(() => {
    // In a real application, you would fetch the trider's current location
    // and status from a backend or a geolocation API.
    // For now, we'll use a static location.
    // Also fetch dummy data for map components
    // Example dummy data (replace with actual fetches)
    setTriders([]); // Populate with dummy trider data
    setRideRequests([]); // Populate with dummy ride request data
    setTodaZones([]); // Populate with dummy toda zone data
    // Set a dummy selected trider for the detail panel to show something
    setSelectedTriderProfile(currentTriderProfile);
  }, []);

  const handleToggleOnline = () => {
    setIsOnline(!isOnline);
    // In a real app, this would update the trider's status on the backend
  };

  const handleSelectTrider = (trider: Trider | null) => setSelectedTrider(trider);
  const handleSelectRideRequest = (request: RideRequest | null) => setSelectedRideRequest(request);

  // TriderWalletInfo functions
  const handleSendPayout = (amount: number) => {
    console.log(`Sending payout of ₱${amount}`);
    setTriderWallet(prev => ({
      ...prev,
      currentBalance: prev.currentBalance - amount,
      paymentLogs: [...prev.paymentLogs, { id: `payout-${Date.now()}`, date: new Date(), amount, status: 'completed', method: 'GCash' }]
    }));
    // In a real app, this would trigger a backend payout process
  };

  // TriderChatSheet functions
  const handleChatOpenChange = (isOpen: boolean) => setIsChatOpen(isOpen);
  const handleSendMessage = (messageContent: string) => {
    const newMessage: ChatMessage = {
      id: `msg-${Date.now()}`,
      senderId: 'trider', // Assuming the trider is sending the message from this page
      receiverId: 'dispatcher',
      content: messageContent,
      timestamp: new Date(),
    };
    setChatMessages(prev => [...prev, newMessage]);
    console.log('Message sent:', messageContent);
    // In a real app, send message to backend/websocket
  };

  // TriderDetailPanel functions
  const handleCloseDetailPanel = () => setSelectedTriderProfile(null);
  const handleTriderStatusChange = (triderId: string, newStatus: TriderExtendedStatus) => {
    console.log(`Trider ${triderId} status changed to ${newStatus}`);
    setCurrentTriderProfile(prev => prev ? { ...prev, status: newStatus } : prev);
    // Update backend
  };
  const handlePingTrider = (trider: TriderProfile) => {
    console.log(`Pinging trider ${trider.name}`);
    // Implement ping logic
  };
  const handleSendPayoutFromDetailPanel = (trider: TriderProfile, amount: number) => {
    console.log(`Sending payout of ₱${amount} for trider ${trider.name} from detail panel`);
    // This would typically call the same handleSendPayout or a similar backend function
    handleSendPayout(amount);
  };
  const handleTodaZoneChangeRequest = (triderId: string, action: 'approve' | 'reject') => {
    console.log(`TODA zone change request for ${triderId} ${action}d`);
    // Implement approval/rejection logic
    setCurrentTriderProfile(prev => prev ? { ...prev, todaZoneChangeRequestStatus: action === 'approve' ? 'approved' : 'rejected' } : prev);
  };


  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm p-4 flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">Trider Dashboard</h1>
        <div className="flex items-center space-x-4">
          <span className={`px-3 py-1 rounded-full text-sm font-semibold ${isOnline ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {isOnline ? 'Online' : 'Offline'}
          </span>
          <Button onClick={handleToggleOnline} variant={isOnline ? 'destructive' : 'default'}>
            Go {isOnline ? 'Offline' : 'Online'}
          </Button>
          <TriderWalletInfo wallet={triderWallet} onSendPayout={handleSendPayout} />
          <TriderChatSheet
            isOpen={isChatOpen}
            onOpenChange={handleChatOpenChange}
            trider={currentTriderProfile}
            messages={chatMessages}
            onSendMessage={handleSendMessage}
          />
        </div>
      </header>

      {/* Main Content Area */}
      <main className="flex flex-1 overflow-hidden">
        {/* Left Panel: Trider Details & Ride Requests */}
        <aside className="w-1/4 bg-white p-4 border-r border-gray-200 overflow-y-auto">
          {selectedTriderProfile ? (
            <TriderDetailPanel
              trider={selectedTriderProfile}
              allTodaZones={todaZones} // Using the dummy todaZones state
              onClose={handleCloseDetailPanel}
              onStatusChange={handleTriderStatusChange}
              onPingTrider={handlePingTrider}
              onSendPayout={handleSendPayoutFromDetailPanel}
              onTodaZoneChangeRequest={handleTodaZoneChangeRequest}
            />
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>Trider Information</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">Select a trider from the map or list to view details.</p>
              </CardContent>
            </Card>
          )}
          <Separator className="my-4" />
          <Card>
            <CardHeader>
              <CardTitle>Pending Ride Requests</CardTitle>
            </CardHeader>
            <CardContent>
              {/* This would ideally be a list of ride requests */}
              <RideRequestList
                rideRequests={rideRequests}
                selectedRideRequestId={selectedRideRequestId}
                onSelectRideRequest={(request) => setSelectedRideRequestId(request.id)}
                todaZones={todaZones}
              />
            </CardContent>
          </Card>
        </aside>

        {/* Right Panel: Map */}
        <section className="flex-1 relative">
          <MapboxMap
            initialViewState={{
              longitude: currentLocation.lng,
              latitude: currentLocation.lat,
              zoom: 12,
            }}
            triders={triders}
            rideRequests={rideRequests}
            selectedTrider={selectedTrider}
            onSelectTrider={handleSelectTrider}
            selectedRideRequest={selectedRideRequest}
            onSelectRideRequest={handleSelectRideRequest}
            routeGeoJson={routeGeoJson}
            heatmapData={heatmapData}
            todaZones={todaZones}
            showHeatmap={showHeatmap}
          />
          {activeRide && (
            <div className="absolute bottom-4 left-1/2 -translate-x-1/2 bg-white p-4 rounded-lg shadow-lg z-10">
              <h3 className="text-lg font-semibold">Active Ride</h3>
              <p>Passenger: {activeRide.passengerName}</p>
              <p>Destination: {activeRide.destination}</p>
              <Button className="mt-2 w-full">View Ride Details</Button>
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default TriderPage;
